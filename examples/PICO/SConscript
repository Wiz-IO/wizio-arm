# Copyright 2023 (c) WizIO ( Georgi Angelov )

# NOT TESTED WITH HARDWARE

from os.path import join
Import('env')

# EDIT the path to your pico-sdk ( git clone https://github.com/raspberrypi/pico-sdk )
SDK = 'F:/test/pico-sdk'

env.Append(
    CPPDEFINES      = [
        'NDEBUG',
        'PICO_ON_DEVICE=1',   
        'PICO_STDIO_UART'         
    ],
    CPPPATH         = [
        join(SDK, 'src', 'rp2040', 'hardware_regs', 'include'),
        join(SDK, 'src', 'rp2040', 'hardware_structs', 'include'),

        join(SDK, 'src', 'rp2_common', 'hardware_adc', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_base', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_claim', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_clocks', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_divider', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_dma', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_exception', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_flash', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_gpio', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_i2c', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_interp', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_irq', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_rtc', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_pio', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_pll', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_pwm', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_resets', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_spi', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_sync', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_timer', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_uart', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_vreg', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_watchdog', 'include'),
        join(SDK, 'src', 'rp2_common', 'hardware_xosc', 'include'),   

        join(SDK, 'src', 'common', 'pico_base', 'include'),
        join(SDK, 'src', 'common', 'pico_binary_info', 'include'),
        join(SDK, 'src', 'common', 'pico_bit_ops', 'include'),
        join(SDK, 'src', 'common', 'pico_divider', 'include'),
        join(SDK, 'src', 'common', 'pico_stdlib', 'include'),
        join(SDK, 'src', 'common', 'pico_sync', 'include'),
        join(SDK, 'src', 'common', 'pico_time', 'include'),
        join(SDK, 'src', 'common', 'pico_usb_reset_interface', 'include'),
        join(SDK, 'src', 'common', 'pico_util', 'include'),

        join(SDK, 'src', 'rp2_common', 'pico_platform', 'include'),
        join(SDK, 'src', 'rp2_common', 'pico_bootrom', 'include'),
        join(SDK, 'src', 'rp2_common', 'pico_printf', 'include'),
        join(SDK, 'src', 'rp2_common', 'pico_stdio', 'include'),
        join(SDK, 'src', 'rp2_common', 'pico_stdio_uart', 'include'),    
    ],
    CFLAGS          = [  ],
    CCFLAGS         = [  ],
    CXXFLAGS        = [  ],
    LINKFLAGS       = [
        '-Wl,-wrap,malloc',
        '-Wl,-wrap,calloc',
        '-Wl,-wrap,free',               
        '--entry=_entry_point', 
    ],
    LIBS            = [  ],
    LIBSOURCE_DIRS  = [  ],
    LIBPATH         = [  ],
    LDSCRIPT_PATH   = join(SDK, 'src', 'rp2_common', 'pico_standard_link', 'memmap_default.ld'),
)

env.BuildSources( 
    join('$BUILD_DIR', 'startup'),
    join(SDK, 'src', 'rp2_common', 'pico_standard_link'),
    src_filter = [ 
        '-<*>', 
        '+<crt0.S>'
    ]
)

env.BuildSources( 
    join('$BUILD_DIR', 'rp2_common', 'hardware'),
    join(SDK, 'src', 'rp2_common'), 
    src_filter = [ 
        '-<*>', 
        '+<hardware_*>'
    ]
)

env.BuildSources( 
    join('$BUILD_DIR', 'rp2_common', 'common'),
    join(SDK, 'src', 'rp2_common'), 
    src_filter = [ 
        '-<*>', 
        '+<pico_runtime>',
        '+<pico_bootrom>',
        '+<pico_platform>',
        '+<pico_stdio>',
        '+<pico_stdio_uart>',
    ]
)

env.BuildSources( 
    join('$BUILD_DIR', 'common'),
    join(SDK, 'src', 'common'), 
    src_filter = [ 
        '-<*>', 
        '+<pico_sync>',
        '+<pico_time>',
        '+<pico_util>',
    ]
)

env.BoardConfig().update('upload.maximum_ram_size',  262144) 
env.BoardConfig().update('upload.maximum_size',     2097152)

# and this is a minimum build for RPI Pico ...